Matrix multiplication Code Single Thread Code
#include <bits/stdc++.h>
using namespace std;

#define R1 2
#define C1 2
#define R2 2
#define C2 2

void mulMat(int mat1[][C1], int mat2[][C2])
{
    int rslt[R1][C2];

    cout << "Multiplication of given two matrices is:\n";

    for (int i = 0; i < R1; i++)
    {
        for (int j = 0; j < C2; j++)
        {
            rslt[i][j] = 0;

            for (int k = 0; k < R2; k++)
            {
                rslt[i][j] += mat1[i][k] * mat2[k][j];
            }

            cout << rslt[i][j] << "\t";
        }

        cout << endl;
    }
}

int main()
{
    int mat1[R1][C1] = {{1, 1},
                        {2, 2}};

    int mat2[R2][C2] = {{1, 1},
                        {2, 2}};

    if (C1 != R2)
    {
        cout << "The number of columns in Matrix-1  must "
                "be equal to the number of rows in "
                "Matrix-2"
             << endl;
        cout << "Please update MACROs according to your "
                "array dimension in #define section"
             << endl;

        exit(EXIT_FAILURE);
    }
    mulMat(mat1, mat2);
    return 0;
}

Matrix multiplication Code Multi Thread Code
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>
#define MAX 4

void *mult(void *arg)
{
  int *data = (int *)arg;
  int k = 0, i = 0;

  int x = data[0];
  for (i = 1; i <= x; i++)
    k += data[i] * data[i + x];

  int *p = (int *)malloc(sizeof(int));
  *p = k;

  pthread_exit(p);
}

int main()
{

  int matA[MAX][MAX];
  int matB[MAX][MAX];

  int r1 = MAX, c1 = MAX, r2 = MAX, c2 = MAX, i, j, k;

  for (i = 0; i < r1; i++)
    for (j = 0; j < c1; j++)
      matA[i][j] = rand() % 10;

  for (i = 0; i < r1; i++)
    for (j = 0; j < c1; j++)
      matB[i][j] = rand() % 10;

  for (i = 0; i < r1; i++)
  {
    for (j = 0; j < c1; j++)
      printf("%d ", matA[i][j]);
    printf("\n");
  }

  for (i = 0; i < r2; i++)
  {
    for (j = 0; j < c2; j++)
      printf("%d ", matB[i][j]);
    printf("\n");
  }

  int max = r1 * c2;

  pthread_t *threads;
  threads = (pthread_t *)malloc(max * sizeof(pthread_t));

  int count = 0;
  int *data = NULL;
  for (i = 0; i < r1; i++)
    for (j = 0; j < c2; j++)
    {
      data = (int *)malloc((20) * sizeof(int));
      data[0] = c1;

      for (k = 0; k < c1; k++)
        data[k + 1] = matA[i][k];

      for (k = 0; k < r2; k++)
        data[k + c1 + 1] = matB[k][j];

      pthread_create(&threads[count++], NULL,
                     mult, (void *)(data));
    }

  printf("RESULTANT MATRIX IS :- \n");
  for (i = 0; i < max; i++)
  {
    void *k;

    pthread_join(threads[i], &k);

    int *p = (int *)k;
    printf("%d ", *p);
    if ((i + 1) % c2 == 0)
      printf("\n");
  }
  return 0;
}


N queen
#include <bits/stdc++.h>
#define N 8
using namespace std;

void printSolution(int board[N][N])
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
            cout << " " << board[i][j] << " ";
        printf("\n");
    }
}

bool isSafe(int board[N][N], int row, int col)
{
    int i, j;
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

bool solveNQUtil(int board[N][N], int col)
{
    if (col >= N)
        return true;

    for (int i = 0; i < N; i++)
    {
        if (isSafe(board, i, col))
        {
            board[i][col] = 1;
            if (solveNQUtil(board, col + 1))
                return true;
            board[i][col] = 0;
        }
    }
    return false;
}
bool solveNQ()
{
    int board[N][N] = {{0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0},
                       {0, 0, 0, 0, 0, 0, 0, 0}
                       };

    if (solveNQUtil(board, 0) == false)
    {
        cout << "Solution does not exist";
        return false;
    }

    printSolution(board);
    return true;
}
int main()
{
    solveNQ();
    return 0;
}
